// <auto-generated />
using System;
using BlackJack.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlackJack.Data.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlackJack.Domain.Models.Game.BlackjackTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BlackjackTables");
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Game.Hand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSoft")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Hands");
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Game.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Game.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TableId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Game.Spectator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Spectators");
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Users.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("GamesLost")
                        .HasColumnType("int");

                    b.Property<int>("GamesWon")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Game.BlackjackTable", b =>
                {
                    b.OwnsOne("BlackJack.Domain.Models.Betting.Money", "MaxBet", b1 =>
                        {
                            b1.Property<Guid>("BlackjackTableId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("MaxBet");

                            b1.HasKey("BlackjackTableId");

                            b1.ToTable("BlackjackTables");

                            b1.WithOwner()
                                .HasForeignKey("BlackjackTableId");
                        });

                    b.OwnsOne("BlackJack.Domain.Models.Betting.Money", "MinBet", b1 =>
                        {
                            b1.Property<Guid>("BlackjackTableId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("MinBet");

                            b1.HasKey("BlackjackTableId");

                            b1.ToTable("BlackjackTables");

                            b1.WithOwner()
                                .HasForeignKey("BlackjackTableId");
                        });

                    b.Navigation("MaxBet")
                        .IsRequired();

                    b.Navigation("MinBet")
                        .IsRequired();
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Game.Hand", b =>
                {
                    b.HasOne("BlackJack.Domain.Models.Game.Player", null)
                        .WithMany("Hands")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Game.Player", b =>
                {
                    b.OwnsOne("BlackJack.Domain.Models.Betting.Money", "Balance", b1 =>
                        {
                            b1.Property<Guid>("PlayerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Balance");

                            b1.HasKey("PlayerId");

                            b1.ToTable("Players");

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });

                    b.OwnsOne("BlackJack.Domain.Models.Users.PlayerId", "PlayerId", b1 =>
                        {
                            b1.Property<Guid>("PlayerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("PlayerId");

                            b1.HasKey("PlayerId");

                            b1.ToTable("Players");

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });

                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("PlayerId")
                        .IsRequired();
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Game.Seat", b =>
                {
                    b.HasOne("BlackJack.Domain.Models.Game.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BlackJack.Domain.Models.Game.BlackjackTable", null)
                        .WithMany("Seats")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Game.Spectator", b =>
                {
                    b.HasOne("BlackJack.Domain.Models.Game.BlackjackTable", null)
                        .WithMany("Spectators")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("BlackJack.Domain.Models.Users.PlayerId", "PlayerId", b1 =>
                        {
                            b1.Property<Guid>("SpectatorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("PlayerId");

                            b1.HasKey("SpectatorId");

                            b1.ToTable("Spectators");

                            b1.WithOwner()
                                .HasForeignKey("SpectatorId");
                        });

                    b.Navigation("PlayerId")
                        .IsRequired();
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Users.UserProfile", b =>
                {
                    b.OwnsOne("BlackJack.Domain.Models.Betting.Money", "Balance", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Balance");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("UserProfiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.OwnsOne("BlackJack.Domain.Models.Users.PlayerId", "PlayerId", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("PlayerId");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("UserProfiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.OwnsOne("BlackJack.Domain.Models.Betting.Money", "TotalWinnings", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalWinnings");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("UserProfiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("PlayerId")
                        .IsRequired();

                    b.Navigation("TotalWinnings")
                        .IsRequired();
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Game.BlackjackTable", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Spectators");
                });

            modelBuilder.Entity("BlackJack.Domain.Models.Game.Player", b =>
                {
                    b.Navigation("Hands");
                });
#pragma warning restore 612, 618
        }
    }
}
